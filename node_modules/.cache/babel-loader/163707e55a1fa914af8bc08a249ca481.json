{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/buzzlite/MCG-VUiLA/src/Onboarding/OnboardingCompany.js\";\nimport React, { Component } from 'react';\nimport { Form, Input, Select, Segment, Header, Divider, Image } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nconst options = [{\n  key: 'm',\n  text: \"Manufacturer\",\n  value: \"Manufacturer\"\n}, {\n  key: 'd',\n  text: \"Distributor\",\n  value: \"Distributor\"\n}, {\n  key: 't',\n  text: \"3PL Trucking\",\n  value: \"3PL trucking\"\n}];\n\nclass OnboardingCompany extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeHandler = event => {\n      let nam = event.target.name;\n      let val = event.target.value;\n      let err = \"\";\n\n      if (nam === \"company\" || \"location\" || \"scRole\") {\n        if (val !== \"\" && Number(val)) {\n          err = /*#__PURE__*/_jsxDEV(\"strong\", {\n            color: \"red\",\n            children: \"Fields cannot be empty and must be string except Identification Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 23\n          }, this);\n        }\n      }\n\n      this.setState({\n        error: err\n      });\n      this.setState({\n        [nam]: val\n      });\n    };\n\n    this.changeSelect = (e, {\n      value\n    }) => this.setState({\n      scRole: value\n    });\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.registerMyCompany(this.state.companyName, this.state.identificationNumber, this.state.location, this.state.scRole);\n    };\n\n    this.submitHandler = this.submitHandler.bind(this);\n    this.state = {\n      companyName: null,\n      identificationNumber: null,\n      location: null,\n      scRole: null,\n      error: '',\n      companyId: null,\n      owner: null,\n      isApprovedByAdmin: null,\n      isPopUpOpen: true\n    };\n    this.changeHandler = this.changeHandler.bind(this);\n    this.changeSelect = this.changeSelect.bind(this);\n  }\n\n  componentWillMount() {\n    this.checkOwnedCompany();\n  }\n\n  companyDidMount() {\n    this.watchEvents();\n  }\n\n  watchEvents() {\n    this.props.mcg.events.companyRegistered({\n      filter: {\n        _user: this.props.userAccount\n      }\n    }, {\n      fromBlock: 0,\n      toBlock: \"latest\"\n    }, function (error, event) {\n      console.log(event);\n    }).on('data', function (event) {\n      this.setState({\n        companyId: event.companyId\n      });\n      console.log(event.companyId);\n    });\n  }\n\n  async registerMyCompany(companyName, identificationNumber, location, scRole) {\n    const gasAmount = await this.props.mcg.methods.registerCompany(companyName, identificationNumber, location, scRole).estimateGas({\n      from: this.props.userAccount\n    });\n    await this.props.mcg.methods.registerCompany(companyName, identificationNumber, location, scRole).send({\n      from: this.props.userAccount,\n      gas: gasAmount\n    });\n  }\n\n  async checkOwnedCompany() {\n    var company = await this.props.mcg.methods.getYourCompany().call({\n      from: this.props.userAccount\n    });\n    console.log(company.companyId.toNumber());\n\n    if (company.owner.length > 2) {\n      this.setState({\n        companyName: company.companyName,\n        companyId: company.companyId.toNumber(),\n        identificationNumber: company.identificationNumber.toNumber(),\n        isApprovedByAdmin: company.isApprovedByAdmin,\n        location: company.location,\n        scRole: company.scRole\n      });\n    } // console.log(company.companyId.toNumber());\n\n\n    return company.owner.length > 2;\n  }\n\n  render() {\n    return !this.state.companyId ? /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: this.submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        widths: \"equal\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n          control: Input,\n          fluid: true,\n          label: \"Company Name\",\n          placeholder: \" XYZ Ltd.\",\n          name: \"companyName\",\n          onChange: this.changeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          control: Input,\n          fluid: true,\n          label: \"Identification Number\",\n          placeholder: \"123456789\",\n          name: \"identificationNumber\",\n          onChange: this.changeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          control: Input,\n          fluid: true,\n          label: \"Location\",\n          placeholder: \"1000 10 W Ave Vancouver\",\n          name: \"location\",\n          onChange: this.changeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          control: Select,\n          name: \"scRole\",\n          onChange: this.changeSelect,\n          fluid: true,\n          label: \"Select Supply Chain Role\",\n          options: options,\n          placeholder: \"Manufacturer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form.Button, {\n        name: \"submitButton\",\n        type: \"submit\",\n        children: \"Register Company\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this), this.state.error, /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Company Name is \", this.state.companyName, \" and ID is \", this.state.identificationNumber, \" with location \", this.state.location, \" and role\", this.state.scRole, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Segment, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          as: \"h2\",\n          floated: \"center\",\n          children: \"COMPANY DETAILS:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"companyId :company.companyId.toNumber(), identificationNumber: company.identificationNumber.toNumber(), isApprovedByAdmin: company.isApprovedByAdmin, location: company.location, scRole: company.scRole});\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          clearing: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Image, {\n          src: \"./images/Distributor.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default OnboardingCompany;","map":{"version":3,"sources":["/home/buzzlite/MCG-VUiLA/src/Onboarding/OnboardingCompany.js"],"names":["React","Component","Form","Input","Select","Segment","Header","Divider","Image","options","key","text","value","OnboardingCompany","constructor","props","changeHandler","event","nam","target","name","val","err","Number","setState","error","changeSelect","e","scRole","submitHandler","preventDefault","registerMyCompany","state","companyName","identificationNumber","location","bind","companyId","owner","isApprovedByAdmin","isPopUpOpen","componentWillMount","checkOwnedCompany","companyDidMount","watchEvents","mcg","events","companyRegistered","filter","_user","userAccount","fromBlock","toBlock","console","log","on","gasAmount","methods","registerCompany","estimateGas","from","send","gas","company","getYourCompany","call","toNumber","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { Form, Input, Select, Segment, Header, Divider,Image} from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nconst options = [\n    {key: 'm', text: \"Manufacturer\", value: \"Manufacturer\"},\n    {key: 'd', text: \"Distributor\", value: \"Distributor\"},\n    {key: 't', text: \"3PL Trucking\", value: \"3PL trucking\"}\n]\n\nclass OnboardingCompany extends Component{\n\n    constructor(props){\n        super(props);\n        this.submitHandler = this.submitHandler.bind(this);\n        this.state = { companyName: null, identificationNumber: null, location: null,scRole: null,error: '', companyId: null, owner:null, isApprovedByAdmin: null, isPopUpOpen: true};\n        this.changeHandler = this.changeHandler.bind(this);\n        this.changeSelect = this.changeSelect.bind(this);\n\n    }\n\n    componentWillMount(){\n        this.checkOwnedCompany()\n    }\n\n    companyDidMount(){\n        this.watchEvents()\n    }\n\n    watchEvents(){\n        this.props.mcg.events.companyRegistered({\n            filter:{_user: this.props.userAccount}\n        },{fromBlock:0, toBlock: \"latest\"\n        },function(error, event){console.log(event)}).on('data',function(event){\n            this.setState({companyId: event.companyId})\n            console.log(event.companyId);\n        })\n    }\n\n    async registerMyCompany(companyName, identificationNumber,location, scRole){\n        \n        const gasAmount = await this.props.mcg.methods.registerCompany(companyName,identificationNumber,location,scRole).estimateGas({from: this.props.userAccount});\n        await this.props.mcg.methods.registerCompany(companyName,identificationNumber,location,scRole).send({from: this.props.userAccount, gas: gasAmount})\n    }\n\n    async checkOwnedCompany(){\n        var company = await this.props.mcg.methods.getYourCompany().call({from: this.props.userAccount});\n        console.log(company.companyId.toNumber())\n        if(company.owner.length > 2){\n\n\n           this.setState({companyName: company.companyName,\n                        companyId :company.companyId.toNumber(), \n                        identificationNumber: company.identificationNumber.toNumber(), \n                        isApprovedByAdmin: company.isApprovedByAdmin, \n                        location: company.location, \n                        scRole: company.scRole});\n        }\n        // console.log(company.companyId.toNumber());\n        return (company.owner.length > 2)\n    }\n\n    changeHandler = (event) => {\n        let nam = event.target.name;\n        let val = event.target.value;\n        let err = \"\";\n        if (nam === \"company\"||\"location\"||\"scRole\"){\n            if(val!==\"\" && Number(val)){\n                err = <strong color = \"red\">Fields cannot be empty and must be string except Identification Number</strong>\n            }\n    }\n        this.setState({error:err});\n        this.setState({[nam]:val})\n    }\n\n    changeSelect = (e,{value}) => this.setState({scRole:value});\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.registerMyCompany(this.state.companyName, this.state.identificationNumber, this.state.location, this.state.scRole);\n    }\n\n    render(){\n        return(!this.state.companyId\n              ? <Form onSubmit = {this.submitHandler}>\n                    <Form.Group widths = \"equal\">\n                        <Form.Field control = {Input}  fluid label='Company Name' placeholder=' XYZ Ltd.' name = \"companyName\" onChange = {this.changeHandler}/>\n                        <Form.Field control = {Input} fluid label='Identification Number' placeholder=\"123456789\" name = \"identificationNumber\" onChange  = {this.changeHandler} />\n                        <Form.Field control = {Input} fluid label='Location' placeholder=\"1000 10 W Ave Vancouver\" name = \"location\" onChange  = {this.changeHandler} />\n                        <Form.Field control = {Select}\n                            name = \"scRole\"\n                            onChange = {this.changeSelect}   \n                            fluid\n                            label='Select Supply Chain Role'\n                            options = {options} \n                            placeholder='Manufacturer'\n                        />\n                    </Form.Group>\n                    <Form.Button name = \"submitButton\" type = \"submit\" >Register Company</Form.Button>\n                    {this.state.error}\n                    <p>Company Name is {this.state.companyName} and ID is {this.state.identificationNumber} with location {this.state.location} and role{this.state.scRole} </p>                \n                </Form>\n              :<div>\n                     <Segment>\n                        <Header as='h2' floated='center'>\n                         COMPANY DETAILS:\n                        </Header>\n                        <p>\n                        companyId :company.companyId.toNumber(), \n                        identificationNumber: company.identificationNumber.toNumber(), \n                        isApprovedByAdmin: company.isApprovedByAdmin, \n                        location: company.location, \n                        scRole: company.scRole});\n                        </p>\n\n                        <Divider clearing />\n                        <Image src='./images/Distributor.png' />\n                    </Segment>\n              </div>\n        )\n    }\n}\n\nexport default OnboardingCompany;"]},"metadata":{},"sourceType":"module"}